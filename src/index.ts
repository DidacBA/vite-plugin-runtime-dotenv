import { loadEnv, type Plugin, type ResolvedConfig } from 'vite';
import MagicString from 'magic-string';
import { relative, resolve } from 'path';
import { cpSync, rmSync, writeFileSync } from 'fs';
import { ensureDirectoryExists, trimBasePath } from './utils';

export interface Options {
  output: string;
  serveMode: string;
  modes: string[];
  globalVariableName?: string;
  generateDts?: string;
}

export interface NormalizedOptions extends Options {
  fullPath: string;
  relativePath: string;
}

let config: ResolvedConfig;
let distPath: string;
let normalizedOptions: NormalizedOptions;
const envVars = new Map<string, Record<string, string>>;

function normalizeOptions(options: Options): NormalizedOptions {
  const fullPath = resolve(distPath, options.output);
  const relativePath = `/${relative(distPath, fullPath)}`;

  return {
    ...options,
    fullPath,
    relativePath,
    globalVariableName: options.globalVariableName || 'runtimeEnv',
  };
}

function generateContent(mode: string, options: NormalizedOptions) {
  const env = envVars.get(mode);

  if (!env) return '';

  return `// Generated by 'vite-plugin-runtime-env'\n\n` +
    `globalThis.${options.globalVariableName} = {\n` +
    `${Object.keys(env)
        .map((key) => `  ${JSON.stringify(key)}: ${JSON.stringify(env[key])}`)
        .join(',\n')}` +
    `\n};\n`;
}

function generateFile(mode: string, options: NormalizedOptions) {
  const filePath = resolve(distPath, options.output);
  const fileContent = generateContent(mode, options);

  ensureDirectoryExists(filePath);
  writeFileSync(filePath, fileContent, { flag: 'w' });
}

function generateDts() {
  const envVarNames = loadEnv(normalizedOptions.serveMode, process.cwd());
  const dtsPath = resolve('src', 'runtime-env.d.ts');
  const content = `// This file is generated by 'vite-pugin-runtime-env\n\n` +
    `declare global {\n` +
    `  var ${normalizedOptions.globalVariableName}: RuntimeEnv;\n` +
    `}\n\n` +
    `export type RuntimeEnv = {\n` +
    `${Object.keys(envVarNames)
      .map((key) => `  ${key}: string`)
      .join('\n')}\n` +
    `};\n`;

  ensureDirectoryExists(dtsPath);
  writeFileSync(dtsPath, content, { flag: 'w' });
}

export function runtimeEnv(options: Options): Plugin {
  return {
    name: 'vite-plugin-runtime-env',
    configResolved(resolvedConfig) {
      config = resolvedConfig;
      distPath = resolve(config.root, config.build.outDir),
      normalizedOptions = normalizeOptions(options);
      options.modes.forEach((mode) => {
        const env = loadEnv(mode, process.cwd());
        if (!envVars.has(mode)) {
          envVars.set(mode, env);
        }
      });
      if (options.generateDts)  generateDts();
    },
    transform(code) {
      const magicString = new MagicString(code);
      magicString.replaceAll(/import\.meta\.env\.([A-Z0-9_]+)/g, `globalThis.${normalizedOptions.globalVariableName}`);
    
      if (config.build.sourcemap) {
        return {
          code: magicString.toString(),
          map: magicString.generateMap({ hires: true });
        }
      }
    
      return magicString.toString();
    },
    transformIndexHtml() {
      return [
        {
          tag: 'script',
          attrs: {
            src: options.output ? `${options.output}` : '/runtime-env.js'
          },
          injectTo: 'head-prepend',
        }
      ];
    },
    closeBundle() {
      if (config.command === 'serve') {
        return;
      }

      options.modes.forEach((mode) => {
        const tempDir = `temp-dist/${config.build.outDir}/${mode}`;
        generateFile(mode, normalizedOptions);
        cpSync(config.build.outDir, tempDir, { recursive: true });
      });

      rmSync(config.build.outDir, { recursive: true });
      cpSync(`temp-dist/${config.build.outDir}`, config.build.outDir, { recursive: true });
      rmSync('temp-dist', { recursive: true });
    },
    configureServer(server) {
      server.middlewares.use((req, res, next) => {
        const uri = new URL(req.originalUrl!, `http://${req.headers.host}`);
        const pathname = uri.pathname;
        const base = server.config.base || '/';
        const trimmedPathname = trimBasePath(pathname, base);

        if (pathname === normalizedOptions.relativePath || trimmedPathname === normalizedOptions.relativePath) {
          const mode = config.mode ?? 'dev';
          const content = generateContent(mode, normalizedOptions);
          res.writeHead(200, {
            'content-type': 'application/javascript',
          });
          res.write(content);
          res.end();
        } else {
          next();
        }
      });
    }
  }
}
